module AwDatapipe

  class Pipeline
    attr_accessor :id # AWS pipeline id
    attr_accessor :uuid # Unique id
    attr_reader :objects # ObjectHash[:id => PipelineObject]
    attr_reader :parameter_metadata # Hash['parameterName' => Hash[type:|default:|description:|...]
    attr_reader :parameter_values # Hash['parameterName' => "value"]

    # objects [Array]
    def initialize(objects, parameter_metadata, parameter_values)
      objects.each { |object| object.pipeline = self }
      @objects ||= ObjectHash.new(*objects)
      @parameter_metadata, @parameter_values = parameter_metadata, parameter_values
    end

    def self.build(config, activities, parameter_metadata, parameter_values)
      new([], parameter_metadata, parameter_values).tap { |p| p.objects.append_with_dependents(config, *activities) }
    end

    def configuration
      objects.fetch(:default)
    end

    def referenced_object_ids
      referenced_objects.map(&:id) << :default
    end

    # Collect dependencies for all objects, removing duplicates.
    # @return [Array] referenced objects, with dependees before dependents.
    def referenced_objects
      objects.values.map(&:dependencies).flatten.uniq
    end

    def source
      [
        header_source,
        objects_source,
        parameter_metadata_source,
        parameter_values_source,
        footer_source
      ].join("\n")
    end

    def write_source(pathname)
      File.write(pathname, source)
    end

    protected

    def footer_source
      <<-EOF
pipelines = AwDatapipe::Session.new
pipeline = AwDatapipe::Pipeline.build(default, activities, parameter_metadata, parameter_values)
pipeline.id = "#{id}"
pipelines.save(pipeline)
      EOF
    end

    def header_source
      <<-EOF
# Generated by aw_datapipe download_definition of #{id}
require 'aw_datapipe'
      EOF
    end

    def objects_source
      object_ids = objects.keys
      unreferenced_object_ids = object_ids - referenced_object_ids

      s = referenced_object_ids.map { |id| "#{id} = #{objects[id].source}" }.join("\n\n")
      s << "\n\nactivities = [\n"
      s << unreferenced_object_ids.map { |id| "  #{objects[id].source(2)}" }.join(",\n")
      s << "\n]"
    end

    def parameter_values_source
      "parameter_values = {\n  " << parameter_values.sort.map do |key, value|
        "\"#{key}\" => #{value.inspect}"
      end.join(",\n  ") << "\n}\n"
    end

    def parameter_metadata_source
      "parameter_metadata = {\n  " << parameter_metadata.sort.map do |key, value|
        "\"#{key}\" => #{value.source}"
      end.join(",\n  ") << "\n}\n"
    end
  end
end
