module AwDatapipe
  # Writes a Pipeline definition into a ruby script.
  class SourceWriter
    def self.call(pipeline, pathname)
      new(pipeline).call(pathname)
    end

    attr_reader :pipeline
    delegate :objects, :parameter_values, :parameter_metadata, :referenced_object_ids, to: :pipeline

    def initialize(pipeline)
      @pipeline = pipeline
    end

    def call(pathname)
      File.write(pathname, source)
    end

    def source
      [
        header_source,
        objects_source,
        parameter_metadata_source,
        parameter_values_source,
        footer_source
      ].join("\n")
    end

    protected

    def header_source
      <<-EOF
# Generated by aw_datapipe download_definition of #{pipeline.id}
require 'aw_datapipe'
      EOF
    end

    def objects_source
      object_ids = objects.keys
      unreferenced_object_ids = object_ids - referenced_object_ids
      s = referenced_object_ids.map { |id| "#{id} = #{objects[id].source}" }.join("\n\n")
      s << "\n\nactivities = [\n"
      s << unreferenced_object_ids.map { |id| "  #{objects[id].source(2)}" }.join(",\n")
      s << "\n]"
    end

    def parameter_metadata_source
      "parameter_metadata = {\n  " << parameter_metadata.sort.map do |key, value|
        "\"#{key}\" => #{value.source}"
      end.join(",\n  ") << "\n}\n"
    end

    def parameter_values_source
      "parameter_values = {\n  " << parameter_values.sort.map do |key, value|
        "\"#{key}\" => #{value.inspect}"
      end.join(",\n  ") << "\n}\n"
    end

    def footer_source
      <<-EOF
pipelines = AwDatapipe::Session.new
pipeline = AwDatapipe::Pipeline.build(default, activities, parameter_metadata, parameter_values)
pipeline.id = "#{pipeline.id}"
pipelines.save(pipeline)
      EOF
    end
  end
end
